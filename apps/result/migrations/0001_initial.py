# Generated by Django 5.0.4 on 2024-06-18 12:52

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("corecode", "0001_initial"),
        ("students", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Result",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "test_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=None,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(50),
                        ],
                    ),
                ),
                (
                    "exam_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=None,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(50),
                        ],
                    ),
                ),
                (
                    "average",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
                ),
                (
                    "total",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
                ),
                (
                    "overall_average",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=5),
                ),
                ("overall_status", models.CharField(default="FAIL", max_length=10)),
                ("status", models.CharField(default="FAIL", max_length=10)),
                (
                    "gpa",
                    models.DecimalField(decimal_places=3, default=0.0, max_digits=5),
                ),
                ("subject_grade", models.CharField(default="F", max_length=1)),
                (
                    "current_class",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="corecode.studentclass",
                    ),
                ),
                (
                    "exam",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="corecode.examtype",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="corecode.academicsession",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="students.student",
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="corecode.subject",
                    ),
                ),
                (
                    "term",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="corecode.academicterm",
                    ),
                ),
            ],
            options={
                "ordering": ["subject"],
                "permissions": [("delete_page", "Can delete page results")],
            },
        ),
        migrations.CreateModel(
            name="StudentInfos",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "disprine",
                    models.CharField(
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("F", "F"),
                        ],
                        default="A",
                        max_length=1,
                    ),
                ),
                (
                    "sports",
                    models.CharField(
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("F", "F"),
                        ],
                        default="A",
                        max_length=1,
                    ),
                ),
                (
                    "care_of_property",
                    models.CharField(
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("F", "F"),
                        ],
                        default="A",
                        max_length=1,
                    ),
                ),
                (
                    "collaborations",
                    models.CharField(
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("F", "F"),
                        ],
                        default="A",
                        max_length=1,
                    ),
                ),
                (
                    "date_of_closing",
                    models.DateField(default=django.utils.timezone.now),
                ),
                (
                    "date_of_opening",
                    models.DateField(default=django.utils.timezone.now),
                ),
                ("teacher_comments", models.TextField(blank=True)),
                ("head_comments", models.TextField(blank=True)),
                (
                    "exam",
                    models.ForeignKey(
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="corecode.examtype",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="corecode.academicsession",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="students.student",
                    ),
                ),
                (
                    "term",
                    models.ForeignKey(
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="corecode.academicterm",
                    ),
                ),
            ],
            options={
                "permissions": [
                    ("view_single_student_results", "Can view single student results")
                ],
            },
        ),
    ]
